<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">

<!-- type은 mybatis-config에서 member 라는 별칭을 정해두었음 -->
<resultMap type="member" id="memberResultSet">
   	<id column="USER_NO" property="userNo"></id>
   	<result column="USER_NO_1" property="userNo2"></result>
	<result column="USER_NAME" property="userName"></result>
	<result column="PHONE" property="phone"></result>
	<result column="BIRTH" property="birth"></result>
	<result column="EMAIL" property="email"></result>
	<result column="COUNT" property="count"></result>
	<result column="CREATE_DATE" property="createDate"></result>
	<result column="STATUS" property="status"></result>
	<result column="HEART_COUNT" property="heartCount"></result>
	<result column="ACCOUNT" property="account"></result>
	<result column="BLACKLIST" property="blackListStatus"></result>
	<result column="REPORT_COUNT" property="reportCount"></result>

</resultMap>

<resultMap type="account" id="accountResultSet">
   	<id column="ACCOUNT_ID" property="accountId"></id>
	<result column="USER_NO" property="userNo"></result>
	<result column="ACCOUNT" property="account"></result>
	<result column="BANK" property="bank"></result>
</resultMap>

<!-- 입력한 정보로 가입한 회원여부 확인 -->
<select id="selectExistenceStatus" parameterType="member" resultType="int">
	SELECT COUNT(*)
	FROM MEMBER
	WHERE STATUS = 'Y'
	AND
	<choose>
		<when test="phone != null and email == null">
			PHONE = #{phone}
		</when>
		<when test="phone == null and email != null">
			EMAIL = #{email}
		</when>
	</choose>
</select>

<!-- 회원가입 -->
<insert id="insertMember" parameterType="member">
	<if test="phone != null">
	INSERT INTO MEMBER (USER_NO, USER_NAME, PHONE, BIRTH) 
	VALUES (SEQ_MNO.NEXTVAL ,#{userName}, #{phone}, #{birth})
	</if>
	<if test="email != null">
	INSERT INTO MEMBER (USER_NO, USER_NAME, EMAIL , BIRTH) 
	VALUES (SEQ_MNO.NEXTVAL ,#{userName}, #{email}, #{birth})
	</if>
</insert>

<!-- 카카오로 로그인한 회원객체 select -->
<select id="loginAndMemberEnrollKaKako" parameterType="member" resultMap="memberResultSet">
	SELECT *
	FROM MEMBER
	WHERE STATUS = 'Y' 
	AND EMAIL = #{email}
</select>

<!-- 본인인증으로 회원객체 select -->
<select id="loginAndMemberEnrollauAuthentication" parameterType="member" resultMap="memberResultSet">
	SELECT *
	FROM MEMBER
	WHERE STATUS = 'Y' 
	AND PHONE = #{phone}
</select>

<!-- 회원탈퇴  -->
<update id="deleteMember" parameterType="int">
	DELETE
	FROM MEMBER
	WHERE USER_NO = #{userNo}
</update>

<!-- 회원탈퇴한 사람인지 확인해보기 -->
<select id="selectUserState" parameterType="member" resultType="int">
	SELECT COUNT(*)
	FROM MEMBER
	WHERE STATUS = 'N'
	AND
	<choose>
		<when test="phone != null and email == null">
			PHONE = #{phone}
		</when>
		<when test="phone == null and email != null">
			EMAIL = #{email}
		</when>
	</choose>
</select>



<!-- 찜한상품수 변경사항 업데이트 -->
<select id="selectMem" parameterType="member" resultType="member">
	SELECT *
	FROM MEMBER
	WHERE USER_NO = #{userNo} AND STATUS = 'Y' 

</select>


<!-- 탈퇴한 회원 새롭게 로그인하는 메소드 -->
<update id="updateUserState" parameterType="member">
	UPDATE MEMBER
	SET STATUS = 'Y' , USER_NO = SEQ_MNO.NEXTVAL
	WHERE STATUS = 'N'
	AND
	<choose>
		<when test="phone != null and email == null">
			PHONE = #{phone}
		</when>
		<when test="phone == null and email != null">
			EMAIL = #{email}
		</when>
	</choose>
</update>

<!-- 회원번호로 그 사람 객체 가져오기 -->
<select id="selectUser" parameterType="int" resultType="member">
	SELECT *
	FROM MEMBER
	WHERE USER_NO = #{userNo}
</select>

<!-- 회원탈퇴한 유저 상태변경으로 다시 넣기 -->
<insert id="insertLeaveUser" parameterType="member">
	<if test="phone != null">
		INSERT INTO MEMBER (USER_NO, USER_NAME, PHONE, BIRTH, CREATE_DATE, STATU) 
		VALUES (#{userNo} ,#{userName}, #{phone}, #{birth}, #{createDate} ,'N')
	</if>
	<if test="email != null">
		INSERT INTO MEMBER (USER_NO, USER_NAME, EMAIL , BIRTH, CREATE_DATE ,STATUS) 
		VALUES (#{userNo} ,#{userName}, #{email}, #{birth}, #{createDate} ,'N')
	</if>
</insert>

<!-- 블랙리스트 유저인지 확인 -->
<select id="selectblackconsumer" parameterType="member" resultType="int">
	SELECT COUNT(*)
	FROM MEMBER
	WHERE BLACKLIST = 'Y' AND 
	<choose>
		<when test="phone != null and email == null">
			PHONE = #{phone}
		</when>
		<when test="phone == null and email != null">
			EMAIL = #{email}
		</when>
	</choose>
</select>

<!-- 블랙리스트 유저 값 다시 넣기 -->
<select id="insertBlackListUser" parameterType="member">
	<if test="phone != null">
		INSERT INTO MEMBER (USER_NO, USER_NAME, PHONE, BIRTH, STATUS, CREATE_DATE, BLACKLIST) 
		VALUES (#{userNo} ,#{userName}, #{phone}, #{birth}, 'N',#{createDate},  'Y')
	</if>
	<if test="email != null">
		INSERT INTO MEMBER (USER_NO, USER_NAME, EMAIL , BIRTH, STATUS, CREATE_DATE, BLACKLIST) 
		VALUES (#{userNo} ,#{userName}, #{email}, #{birth}, 'N',#{createDate},  'Y')
	</if>
</select>

<!-- 계좌 추가하기 -->
<insert id="userAddAccount" parameterType="account" >
	INSERT INTO ACCOUNT(ACCOUNT_ID, USER_NO, ACCOUNT, BANK)
	VALUES (SEQ_ANO.NEXTVAL, #{userNo}, #{account}, #{bank} )
</insert>

<!-- 계좌 수정하기 -->
<update id="updateAccount" parameterType="int">
	UPDATE ACCOUNT
	SET ACCOUNT = #{account},
		BANK = #{bank}
	WHERE USER_NO = #{userNo}

</update> 



<!-- 판매자의 계좌 가져오기 -->
<select id="selectAccountInfo" parameterType="account" resultType="account" >
	SELECT DISTINCT
            ACCOUNT,
            BANK,
            A.USER_NO AS "USER_NO"
	FROM ACCOUNT A
	LEFT JOIN SELL S ON (S.USER_NO = A.USER_NO)
	WHERE ACCOUNT = #{account} 
</select>

<!-- 로그인유저의 계좌 가져오기 -->
<select id="accountNumber" parameterType="account" resultType="int">
	SELECT
		COUNT(ACCOUNT)
	FROM ACCOUNT A
	LEFT JOIN MEMBER M ON (M.USER_NO = A.USER_NO)
	WHERE A.USER_NO = #{userNo} 
</select>

<!-- 관리자페이지 결제관리 -->
<!-- 수정중 -->
<select id="accountList">
	SELECT A.ACCOUNT,
			A.BANK,
			S.SELL_TITLE,
			S.USER_NO,
			S.SELL_NO,
			P.CREATE_DATE,
			P.PRICE,
			P.USER_NO,
			P.ORDER_NO
	FROM ACCOUNT A
	JOIN PURCHASE P ON(A.USER_NO = P.USER_NO)
	JOIN SELL S ON(S.SELL_NO = P.SELL_NO)
	WHERE A.USER_NO = #{userNo}
	
</select>

<!-- 관리자에서 보이는 유저들 -->
<select id="selectListAll" resultMap="memberResultSet">
SELECT *
FROM MEMBER M2
LEFT JOIN (
        SELECT M.USER_NO,
               COUNT(REPORTED_NO) AS "REPORT_COUNT"
        FROM MEMBER M 
        JOIN REPORT RE ON(RE.REPORTED_NO = M.USER_NO)
        GROUP BY (REPORTED_NO) ) PP ON(PP.USER_NO = M2.USER_NO)
</select>

<select id="selectUserCount" resultType="int">
	SELECT COUNT(*)
	FROM MEMBER
</select>



</mapper>