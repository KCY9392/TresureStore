<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="chattingMapper">

<!-- type은 mybatis-config에서 chatRoom 라는 별칭을 정해두었음 -->
<resultMap type="chatRoom" id="chatResultSet" >
     <id column="CHATROOM_NO" property="chatRoomNo"/>
     <result column="USER_NO" property="userNo"/>
     <result column="SELLUSER_NO" property="sellUserNo"/>
     <result column="SELL_NO" property="sellNo"/>
     <result column="STATUS" property="status"/>
     <result column="CREATE_DATE" property="createDate"/>
     <result column="CHAT_CREATE_DATE" property="chatDate"/>
     <result column="AVG" property="avg"/>
     <result column="SELL_TITLE" property="sellTitle"/>
     <result column="PURCHASEUSER_AVG" property="purchaseUserAvg"/>
</resultMap>


<!-- type은 mybatis-config에서 chatMessage 라는 별칭을 정해두었음 -->
<resultMap type="chatMessage" id="chatMessageResultSet">
   <id column="CHAT_NO" property="chatNo"></id>
   <result column="CHATROOM_NO" property="chatRoomNo"/>
   <result column="USER_NO" property="userNo"/>
   <result column="CHAT_CONTENT" property="chatContent"/>
   <result column="CREATE_DATE" property="createDate"/>
   <result column="READ_STATUS" property="readStatus"/>
   <result column="USER_NAME" property="userName"/>
</resultMap>

<resultMap type="block" id="blockResultSet" >
      <id column="BLOCK_NO" property="blockNo"/>
      <result column="BLOCKER_NO" property="blockerNo"/>
      <result column="BLOCKED_NO" property="blockedNo"/>
      <result column="AVG" property="avg"/>
      <result column="USER_NO" property="userNo"/>
      <result column="CHATROOM_NO" property="chatRoomNo"/>
</resultMap>

<resultMap type="chatRoomJoin" id="chatRoomJoinResultSet">
   <result column="USER_NO" property="userNo"/>
    <result column="CHATROOM_NO" property="chatRoomNo"/>
</resultMap>



<resultMap type="chatfiles" id="chatFileResultSet">
	<result column="CFILE_NO" property="cfileNo"/>
	<result column="CHATROOM_NO" property="chatRoomNo"/>
	<result column="ORIGIN_NAME" property="originName"/>
	<result column="CHANGE_NAME" property="changeName"/>
	<result column="UPLOAD_DATE" property="uploadDate"/>
	<result column="FILE_PATH" property="filePath"/>
	<result column="STATUS" property="status"/>
	<result column="USER_NO" property="userNo"/>
</resultMap>


<!-- 채팅방 목록 개수 조회 -->
<select id="selectChatListCount" parameterType="Integer" resultType="Integer">
	SELECT COUNT(*)
	FROM CHAT_ROOM_JOIN
	WHERE USER_NO = #{userNo}
</select>


<!-- 채팅방 목록 조회 -->
<select id="selectChatRoomList" parameterType="hashMap" resultMap="chatResultSet">
   SELECT CR.CHATROOM_NO,
          CR.SELL_NO,
          S.USER_NO AS "SELLUSER_NO",
          CR.USER_NO AS "USER_NO",
          CR.CREATE_DATE AS "CREATE_DATE",
          CM.CREATE_DATE AS "CHAT_CREATE_DATE",
          SUBSTR(S.SELL_TITLE, 1, 15)AS "SELL_TITLE",
          PP.AVG,
          pp2.avg AS "PURCHASEUSER_AVG"
   FROM CHAT_ROOM CR
   JOIN CHAT_ROOM_JOIN CRJ ON (CRJ.CHATROOM_NO = CR.CHATROOM_NO)
    LEFT JOIN (SELECT MAX(CREATE_DATE) AS CREATE_DATE, 
                      CHATROOM_NO 
               FROM CHAT_MESSAGE 
               GROUP BY CHATROOM_NO) CM ON (CR.CHATROOM_NO = CM.CHATROOM_NO)
   JOIN SELL S ON (S.SELL_NO = CR.SELL_NO)
   LEFT JOIN ( SELECT AVG(REV_SCORE) AS "AVG",
                      S.USER_NO
               FROM REVIEW R
               JOIN SELL S ON (S.SELL_NO = R.SELL_NO)
               WHERE R.STATUS = 'Y'
               GROUP BY S.USER_NO) PP ON (S.USER_NO = PP.USER_NO)
    LEFT JOIN ( SELECT AVG(REV_SCORE) AS "AVG",
                      cr.USER_NO
               FROM REVIEW R
               join sell s on (s.sell_no = r.sell_no)
               JOIn chat_room cr ON (cr.user_NO = s.user_NO)
               WHERE R.STATUS = 'Y'
               GROUP BY cr.USER_NO) PP2 ON (cr.USER_NO = PP2.USER_NO)
 	  WHERE CRJ.USER_NO = #{userNo} AND S.STATUS = 'Y' 
    ORDER BY CHAT_CREATE_DATE DESC NULLS LAST, CREATE_DATE DESC
</select>
 
<!-- 채팅방 나가기(삭제) -->
<delete id="exitChatRoom" parameterType="chatRoomJoin">
    DELETE 
    FROM CHAT_ROOM_JOIN
   WHERE USER_NO = #{userNo} AND CHATROOM_NO = #{chatRoomNo}
</delete>

<!-- 차단리스트 조회 -->
<select id="selectBlockList" parameterType="int" resultMap="blockResultSet" >
    SELECT DISTINCT
          B.BLOCK_NO,
          M.USER_NO AS "BLOCKER_NO",
          S.USER_NO AS "BLOCKED_NO",
          NVL(AVG, 0) AS "AVG"
    FROM BLOCK B
    LEFT JOIN MEMBER M ON(B.BLOCKER_NO = M.USER_NO)
    JOIN SELL S ON(B.BLOCKED_NO = S.USER_NO)
     LEFT JOIN (  SELECT AVG(REV_SCORE) AS "AVG",
                     S.USER_NO
           FROM REVIEW R
           JOIN SELL S ON (S.SELL_NO = R.SELL_NO)
           WHERE R.STATUS = 'Y'
           GROUP BY S.USER_NO) PP ON (S.USER_NO = PP.USER_NO)
    WHERE B.BLOCKER_NO = #{blockerNo}
    ORDER BY BLOCK_NO DESC

</select>

<!-- 차단리스트에 추가 -->
<insert id="addBlock" parameterType="block">
   INSERT INTO BLOCK (BLOCK_NO, BLOCKER_NO, BLOCKED_NO)
   VALUES (SEQ_BLNO.NEXTVAL, #{blockerNo}, #{blockedNo})
</insert>

<!-- 차단 풀기, 차단 리스트에서 삭제(해제) -->
<delete id="deleteBlock" parameterType="block">
	DELETE
	FROM BLOCK
	WHERE BLOCKER_NO = #{blockerNo} AND BLOCKED_NO = #{blockedNo}
</delete>

<!-- 채팅보내기 -->
<insert id="insertMessage" parameterType="chatMessage">
   INSERT INTO CHAT_MESSAGE (CHAT_NO, CHATROOM_NO, USER_NO, CHAT_CONTENT)
   VALUES (SEQ_CMNO.NEXTVAL, #{chatRoomNo}, #{userNo}, #{chatContent})
</insert>

<!-- 채팅방 참여여부 확인 -->
<select id="joinCheck" parameterType="chatRoomJoin" resultType="int">
    SELECT
        COUNT(*)
    FROM CHAT_ROOM_JOIN
    WHERE CHATROOM_NO = #{chatRoomNo} AND USER_NO = #{userNo}
</select>

<!-- 채팅방 참여 -->
<insert id="inChatRoomJoin" parameterType="chatRoomJoin">
   INSERT INTO CHAT_ROOM_JOIN (CHATROOM_NO, USER_NO)
   VALUES (#{chatRoomNo}, #{userNo})
</insert>

<!-- 해당 채팅방 메세지 다 가져오기 -->
<select id="selectChatMessageList" parameterType="chatRoomJoin" resultMap="chatMessageResultSet">
    SELECT 
        CHAT_CONTENT,
        C.CREATE_DATE,
        C.USER_NO,
        USER_NAME
    FROM CHAT_MESSAGE C
    JOIN MEMBER M ON (M.USER_NO = C.USER_NO)
    WHERE CHATROOM_NO = #{chatRoomNo}
    ORDER BY CHAT_NO
</select>


<!-- 채팅방 존재하는지 검색 -->
<select id="selectChatRoomByObject" parameterType="chatRoom" resultType="int">
   SELECT COUNT(*)
   FROM CHAT_ROOM
   WHERE SELL_NO = #{sellNo} AND USER_NO = #{userNo}
</select>



<!-- 채팅하기 실행하기 (방생성)  -->
<insert id="createChatRoom" parameterType="chatRoom" useGeneratedKeys="true">
   <selectKey keyProperty="chatRoomNo" resultType="int" order="BEFORE">
      SELECT SEQ_CRNO.NEXTVAL  FROM DUAL
   </selectKey>
   INSERT INTO CHAT_ROOM (CHATROOM_NO, SELL_NO, USER_NO, CREATE_DATE, STATUS)
   VALUES ( #{chatRoomNo} , #{sellNo}, #{userNo}, DEFAULT, DEFAULT )
</insert>


<!-- 해당 채팅방 번호 가져오기 -->
<select id="selectChatRoomNo" parameterType="chatRoom" resultType="int">
   SELECT CHATROOM_NO
   FROM CHAT_ROOM
   WHERE SELL_NO = #{sellNo} AND USER_NO = #{userNo}
</select>


<!-- 채팅방번호로 인해 채팅방 정보가져오기 -->
<select id="selectChatRoomByNo" parameterType="int" resultMap="chatResultSet">
   SELECT CHATROOM_NO,
         CR.SELL_NO,
           S.USER_NO AS "SELLUSER_NO",
         CR.USER_NO,
         CR.CREATE_DATE,
         CR.STATUS
   FROM CHAT_ROOM CR
    JOIN SELL S ON(S.SELL_NO = CR.SELL_NO)
   WHERE CHATROOM_NO = #{chatRoomNo}
</select>

<!-- 채팅방 만든 (구매자)유저번호, 구매자의 평점 가져오기 -->
<select id="selectUserNoByChatRoomNo" parameterType="int" resultMap="chatResultSet">
	SELECT AVG(REV_SCORE) AS "PURCHASEUSER_AVG",
	      PP.USER_NO AS "USER_NO"
	FROM REVIEW R
	FULL OUTER JOIN SELL S ON (S.SELL_NO = R.SELL_NO)
	RIGHT JOIN (
	        SELECT USER_NO
	        FROM CHAT_ROOM
	        WHERE CHATROOM_NO = #{chatRoomNo} ) PP ON  (PP.USER_NO = S.USER_NO)
	GROUP BY PP.USER_NO
</select>

<!-- 현재 채팅방에서 누군가 차단했는지 확인하기 -->
<select id="selectUsers" parameterType="int" resultMap="chatResultSet">
	SELECT S.USER_NO AS "SELLUSER_NO",
	       CR.USER_NO AS "USER_NO"
	FROM CHAT_ROOM CR
	JOIN SELL S ON (S.SELL_NO = CR.SELL_NO)
	WHERE CHATROOM_NO = #{chatRoomNo}
</select>

<!-- 경우1) 구매자가 판매자 차단한경우 찾기 -->
<select id="selectBlockFind1" parameterType="block" resultType="int">
	SELECT COUNT(*)
	FROM BLOCK
	WHERE BLOCKER_NO = #{blockerNo} AND BLOCKED_NO = #{blockedNo}
</select>

<!-- 경우2) 판매자가 구매자 차단한경우 찾기 -->
<select id="selectBlockFind2" parameterType="block" resultType="int">
	SELECT COUNT(*)
	FROM BLOCK
	WHERE BLOCKER_NO = #{blockerNo} AND BLOCKED_NO = #{blockedNo}
</select>

<!-- 메세지 보낼때 상대방 차단 확인 -->
<select id="blockCheck" parameterType="block" resultType="int">
	SELECT COUNT(*)
	FROM BLOCK
	WHERE BLOCKER_NO = #{blockerNo} AND BLOCKED_NO = #{blockedNo}
</select>

<!-- 회원탈퇴 했는지 찾아보기 -->
<select id="selectMemberFind" parameterType="int" resultType="int">
	SELECT COUNT(*)
	FROM CHAT_ROOM CR
	JOIN SELL S ON (S.SELL_NO = CR.SELL_NO)
	JOIN MEMBER M1 ON (S.USER_NO = M1.USER_NO)
	JOIN MEMBER M2 ON (CR.USER_NO = M2.USER_NO)
	WHERE CHATROOM_NO = #{chatRoomNo} AND M1.STATUS = 'Y' AND M2.STATUS = 'Y'
</select>


<!-- 채팅 이미지 데베 저장 -->
<insert id="insertchatImage" parameterType="chatfiles">
	INSERT INTO CFILE (CFILE_NO, CHATROOM_NO, ORIGIN_NAME, CHANGE_NAME, FILE_PATH, USER_NO)
	VALUES (SEQ_CFNO.NEXTVAL, #{chatRoomNo}, #{originName}, #{changeName}, #{filePath}, #{userNo})
</insert>

<!-- 스케줄러에 사용할 채팅 첨부파일들 전부 불러오기 -->
<select id="selectAttachment" resultMap="chatFileResultSet">
	SELECT *
	FROM CFILE
</select>

<!-- 채팅창에 거래완료된 상품의 리뷰등록 여부 확인 -->
<select id="reviewCheck" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM REVIEW WHERE SELL_NO = #{sellNo}
</select>
	


	
	




   
</mapper>